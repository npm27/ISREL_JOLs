#Read
temp = t.test(Read.JOL2$F, Read.RECALL2$F, paired = T, p.adjust.methods = "Bonferroni")
p = round(temp$p.value, 3)
t = temp$statistic
SEM = (temp$conf.int[2] - temp$conf.int[1]) / 3.92
mean(Read.JOL2$F)
mean(Read.RECALL2$F)
Read.JOL2$task = rep("JOL")
Read.RECALL2$task = rep("RECALL")
pbic2 = rbind(Read.JOL2, Read.RECALL2)
length(unique(pbic2$Subject))
ezANOVA(pbic2,
dv = F,
within = task,
wid = Subject,
type = 3,
detailed = T)
#RL
temp = t.test(RL.JOL2$F, RL.RECALL2$F, paired = T, p.adjust.methods = "Bonferroni")
p = round(temp$p.value, 3)
t = temp$statistic
SEM = (temp$conf.int[2] - temp$conf.int[1]) / 3.92
mean(RL.JOL2$F)
mean(RL.RECALL2$F)
RL.JOL2$task = rep("JOL")
RL.RECALL2$task = rep("RECALL")
pbic3 = rbind(RL.JOL2, RL.RECALL2)
length(unique(pbic3$Subject))
ezANOVA(pbic3,
dv = F,
within = task,
wid = Subject,
type = 3,
detailed = T)
##symmetrical pairs
####Put together output for Bar charts/Tables####
##First, drop the Block, RT Column, and task columns
anova_jol2 = anova_jol[ , -c(3, 4, 7)]
anova_recall2 = anova_recall[ , -c(3, 4, 7)]
##Now subset based on encoding strategy
table(anova_jol2$type)
##jols
IS_JOL3 = subset(anova_jol2,
anova_jol2$type == "IS")
RL_JOL3 = subset(anova_jol2,
anova_jol2$type == "RL")
Read_JOL3 = subset(anova_jol2,
anova_jol2$type == "READ")
##Recall
IS.RECALL3 = subset(anova_recall2,
anova_recall2$type == "IS")
RL.RECALL3 = subset(anova_recall2,
anova_recall2$type == "RL")
Read.RECALL3 = subset(anova_recall2,
anova_recall2$type == "READ")
##Okay, now cast them into the right form
##jols
IS_JOL4 = cast(IS_JOL3, Subject ~ Direction, mean, na.rm = T)
RL_JOL4 = cast(RL_JOL3, Subject ~ Direction, mean, na.rm = T)
READ_JOL4 = cast(Read_JOL3, Subject ~ Direction, mean, na.rm = T)
##Recall
IS.RECALL4 = cast(IS.RECALL3, Subject ~ Direction, mean, na.rm = T)
RL.RECALL4 = cast(RL.RECALL3, Subject ~ Direction, mean, na.rm = T)
Read.RECALL4 = cast(Read.RECALL3, Subject ~ Direction, mean, na.rm = T)
##Write stuff to .csv
#write.csv(IS_JOL4, file = "IS JOLS.csv", row.names = F)
#write.csv(RL_JOL4, file = "RL JOLS.csv", row.names = F)
#write.csv(READ_JOL4, file = "Read JOLs.csv", row.names = F)
#write.csv(IS.RECALL4, file = "IS RECALL.csv", row.names = F)
#write.csv(RL.RECALL4, file = "RL RECALL.csv", row.names = F)
#write.csv(Read.RECALL4, file = "Read RECALL.csv", row.names = F)
##Do the supplemental table
block1 = subset(anova_data, anova_data$Block == 1)
block2 = subset(anova_data, anova_data$Block == 2)
#Now split each block by measure
block1.jol = subset(block1, block1$Task == "JOL")
block2.jol = subset(block2, block2$Task == "JOL")
block1.recall = subset(block1, block1$Task == "Recall")
block2.recall = subset(block2, block2$Task == "Recall")
tapply(block1.jol$Score, list(block1.jol$type, block1.jol$Direction), mean, na.rm = T)
tapply(block1.recall$Score, list(block1.recall$type, block1.recall$Direction), mean, na.rm = T)
tapply(block2.jol$Score, list(block2.jol$type, block2.jol$Direction), mean, na.rm = T)
tapply(block2.recall$Score, list(block2.recall$type, block2.recall$Direction), mean, na.rm = T)
##Do some t-tests
####Do that other analysis Mark wants because he's never satisfied####
JOLS = subset(anova_data,
anova_data$Task == "JOL")
RECALL = subset(anova_data,
anova_data$Task == "Recall")
##Get means
tapply(JOLS$Score, JOLS$type, mean, na.rm = T)
tapply(RECALL$Score, RECALL$type, mean, na.rm = T)
##JOLs
output1 = ezANOVA(JOLS,
dv = Score,
between = type,
within = Direction,
wid = Subject,
type = 3,
detailed = 3)
output1$ANOVA$MSE = output1$ANOVA$SSd/output1$ANOVA$DFd
output1$ANOVA$MSE
aovEffectSize(output1, effectSize = "pes")
output1
tapply(JOLS$Score, list(JOLS$type, JOLS$Direction), mean)
#t-tests
#unrelated
temp = t.test(jol.RL$U, jol.read$U, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p = round(temp$p.value, 3)
t = temp$statistic
SEM = (temp$conf.int[2] - temp$conf.int[1]) / 3.92
temp
#pbic
pbic.t1 = jol.RL[ , c(1,5)]
pbic.t1$task = rep("RL")
pbic.t2 = jol.IS[ , c(1,5)]
pbic.t2$task = rep("IS")
pbic.t3 = rbind(pbic.t1, pbic.t2)
ezANOVA(pbic.t3,
dv = U,
between = task,
detailed = T,
wid = Subject,
type = 3)
##related
temp = t.test(jol.RL$S, jol.read$S, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
p = round(temp$p.value, 3)
t = temp$statistic
SEM = (temp$conf.int[2] - temp$conf.int[1]) / 3.92
temp
sd(jol.read$S)
sd(jol.IS$S)
##pbic
pbic.t1 = jol.RL[ , c(1,4)]
pbic.t1$task = rep("RL")
pbic.t2 = jol.read[ , c(1,4)]
pbic.t2$task = rep("read")
pbic.t3 = rbind(pbic.t1, pbic.t2)
ezANOVA(pbic.t3,
dv = S,
between = task,
detailed = T,
wid = Subject,
type = 3)
##Now do Recall
RECALL2 = cast(RECALL, Subject ~ type, mean)
IS = RECALL2$IS
IS = na.omit(IS)
RL = RECALL2$RL
RL = na.omit(RL)
READ = RECALL2$READ
READ = na.omit(READ)
t.test(IS, RL, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
t.test(READ, RL, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
t.test(IS, READ, paired = F, p.adjust.methods = "Bonferroni", var.equal = T)
mean(READ)
mean(RL)
sd(READ)
sd(RL)
##Do pbic for IS and RL recall
IS2 = RECALL2[ , c(1:2)]
IS2$task = rep("IS")
RL2 = RECALL2[ , c(1,4)]
RL2$task = rep("RL")
IS2 = na.omit(IS2)
RL2 = na.omit(RL2)
colnames(IS2)[2] = "encoding"
colnames(RL2)[2] = "encoding"
pbic6 = rbind(IS2, RL2)
ezANOVA(pbic6,
dv = encoding,
between = task,
wid = Subject,
detailed = T,
type = 3)
####Do the three-way interactions####
View(RECALL)
tapply(RECALL$Score, list(RECALL$Direction, RECALL$Block), mean, na.rm = T)
tapply(JOLS$Score, list(JOLS$Direction, JOLS$Block), mean, na.rm = T)
#Do t tests
B1 = subset(RECALL, RECALL$Block == "1")
B2 = subset(RECALL, RECALL$Block == "2")
B11 = subset(JOLS, JOLS$Block == "1")
B22 = subset(JOLS, JOLS$Block == "2")
RL1 = cast(B1, Subject ~ type, mean)
RL2 = cast(B2, Subject ~ type, mean)
JL1 = cast(B11, Subject ~ type, mean)
JL2 = cast(B22, Subject ~ type, mean)
#Test time!
#Readf
temp1 = t.test(JL1$READ, RL1$READ, paired = T, p.adjust.methods = "Bonferroni")
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
temp1 = t.test(JL2$READ, RL2$READ, paired = T, p.adjust.methods = "Bonferroni")
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
mean(JL2$READ, na.rm = T)
mean(RL2$READ, na.rm = T)
sd(JL2$READ, na.rm = T)
sd(RL2$READ, na.rm = T)
temp1 = t.test(JL2$IS, RL2$IS, paired = T, p.adjust.methods = "Bonferroni")
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
mean(JL2$RL, na.rm = T)
mean(RL2$RL, na.rm = T)
sd(JL2$RL, na.rm = T)
sd(RL2$RL, na.rm = T)
temp1 = t.test(JL2$RL, RL2$RL, paired = T, p.adjust.methods = "Bonferroni")
p1 = round(temp1$p.value, 3)
t1 = temp1$statistic
SEM1 = (temp1$conf.int[2] - temp1$conf.int[1]) / 3.92
temp1 #sig
#do pbic
pbic3 = RL1[ , c(1, 2)]
pbic4 = JL1[ , c(1, 2)]
pbic3$block = rep("1")
pbic4$block = rep("2")
pbic5 = rbind(pbic3, pbic4)
pbic5 = na.omit(pbic5)
ezANOVA(pbic5,
wid = Subject,
dv = RL,
within = block,
detailed = T)
#Differ from zero?
#read
t.test(forward_READ$g)
#READ
mean(forward_READ$g, na.rm = T)
##Start with IS
#F
empty = data.frame()
for (i in unique(gammas_IS_F$Subject)){
temp = subset(gammas_IS_F, gammas_IS_F$Subject == i)
g = rcorr.cens(temp$Recall, temp$JOL, outx = TRUE)[2]
g = unname(g)
temp2 = data.frame(i, g)
empty = rbind(temp2, empty)
}
combined = na.omit(combined)
combined_gammas = combined
combined_gammas$Recall[combined_gammas$Recall == 100] = 1
unique(combined_gammas$type)
gammas_IS = subset(combined_gammas,
combined_gammas$type == "IS")
gammas_RL = subset(combined_gammas,
combined_gammas$type == "RL")
gammas_READ = subset(combined_gammas,
combined_gammas$type == "READ")
unique(gammas_IS$Direction)
##Okay, now subset everything by direction
##IS
gammas_IS_F = subset(gammas_IS,
gammas_IS$Direction == "F")
gammas_IS_B = subset(gammas_IS,
gammas_IS$Direction == "B")
gammas_IS_S = subset(gammas_IS,
gammas_IS$Direction == "S")
gammas_IS_U = subset(gammas_IS,
gammas_IS$Direction == "U")
##RL
gammas_RL_F = subset(gammas_RL,
gammas_RL$Direction == "F")
gammas_RL_B = subset(gammas_RL,
gammas_RL$Direction == "B")
gammas_RL_S = subset(gammas_RL,
gammas_RL$Direction == "S")
gammas_RL_U = subset(gammas_RL,
gammas_RL$Direction == "U")
##READ
gammas_READ_F = subset(gammas_READ,
gammas_READ$Direction == "F")
gammas_READ_B = subset(gammas_READ,
gammas_READ$Direction == "B")
gammas_READ_S = subset(gammas_READ,
gammas_READ$Direction == "S")
gammas_READ_U = subset(gammas_READ,
gammas_READ$Direction == "U")
##Okay, gamma time!
##IS
rcorr.cens(gammas_IS_B$Recall, gammas_IS_B$JOL, outx = TRUE)[2]
rcorr.cens(gammas_IS_F$Recall, gammas_IS_F$JOL, outx = TRUE)[2]
rcorr.cens(gammas_IS_S$Recall, gammas_IS_S$JOL, outx = TRUE)[2]
rcorr.cens(gammas_IS_U$Recall, gammas_IS_U$JOL, outx = TRUE)[2]
##RL
rcorr.cens(gammas_RL_B$Recall, gammas_RL_B$JOL, outx = TRUE)[2]
rcorr.cens(gammas_RL_F$Recall, gammas_RL_F$JOL, outx = TRUE)[2]
rcorr.cens(gammas_RL_S$Recall, gammas_RL_S$JOL, outx = TRUE)[2]
rcorr.cens(gammas_RL_U$Recall, gammas_RL_U$JOL, outx = TRUE)[2]
##Read
rcorr.cens(gammas_READ_B$Recall, gammas_READ_B$JOL, outx = TRUE)[2]
rcorr.cens(gammas_READ_F$Recall, gammas_READ_F$JOL, outx = TRUE)[2]
rcorr.cens(gammas_READ_S$Recall, gammas_READ_S$JOL, outx = TRUE)[2]
rcorr.cens(gammas_READ_U$Recall, gammas_READ_U$JOL, outx = TRUE)[2]
##Try the other package
library(vcdExtra)
gammatable1 = table(gammas_IS_B$JOL, gammas_IS_B$Recall)
GKgamma(gammatable1)
##Start with IS
#F
empty = data.frame()
for (i in unique(gammas_IS_F$Subject)){
temp = subset(gammas_IS_F, gammas_IS_F$Subject == i)
g = rcorr.cens(temp$Recall, temp$JOL, outx = TRUE)[2]
g = unname(g)
temp2 = data.frame(i, g)
empty = rbind(temp2, empty)
}
forward_IS = empty
#Backward IS
empty = data.frame()
for (i in unique(gammas_IS_B$Subject)){
temp = subset(gammas_IS_B, gammas_IS_B$Subject == i)
g = rcorr.cens(temp$Recall, temp$JOL, outx = TRUE)[2]
g = unname(g)
temp2 = data.frame(i, g)
empty = rbind(temp2, empty)
}
backward_IS = empty
#Symmetrical IS
empty = data.frame()
for (i in unique(gammas_IS_S$Subject)){
temp = subset(gammas_IS_S, gammas_IS_B$Subject == i)
g = rcorr.cens(temp$Recall, temp$JOL, outx = TRUE)[2]
g = unname(g)
temp2 = data.frame(i, g)
empty = rbind(temp2, empty)
}
symmetrical_IS = empty
#Unrelated IS
empty = data.frame()
for (i in unique(gammas_IS_U$Subject)){
temp = subset(gammas_IS_U, gammas_IS_U$Subject == i)
g = rcorr.cens(temp$Recall, temp$JOL, outx = TRUE)[2]
g = unname(g)
temp2 = data.frame(i, g)
empty = rbind(temp2, empty)
}
Unrelated_IS = empty
##Now do relational
#F
empty = data.frame()
for (i in unique(gammas_RL_F$Subject)){
temp = subset(gammas_RL_F, gammas_RL_F$Subject == i)
g = rcorr.cens(temp$Recall, temp$JOL, outx = TRUE)[2]
g = unname(g)
temp2 = data.frame(i, g)
empty = rbind(temp2, empty)
}
forward_RL = empty
#Backward
empty = data.frame()
for (i in unique(gammas_RL_B$Subject)){
temp = subset(gammas_RL_B, gammas_RL_B$Subject == i)
g = rcorr.cens(temp$Recall, temp$JOL, outx = TRUE)[2]
g = unname(g)
temp2 = data.frame(i, g)
empty = rbind(temp2, empty)
}
backward_RL = empty
#Symmetrical
empty = data.frame()
for (i in unique(gammas_RL_S$Subject)){
temp = subset(gammas_RL_S, gammas_RL_B$Subject == i)
g = rcorr.cens(temp$Recall, temp$JOL, outx = TRUE)[2]
g = unname(g)
temp2 = data.frame(i, g)
empty = rbind(temp2, empty)
}
symmetrical_RL = empty
#Unrelated
empty = data.frame()
for (i in unique(gammas_RL_U$Subject)){
temp = subset(gammas_RL_U, gammas_RL_U$Subject == i)
g = rcorr.cens(temp$Recall, temp$JOL, outx = TRUE)[2]
g = unname(g)
temp2 = data.frame(i, g)
empty = rbind(temp2, empty)
}
Unrelated_RL = empty
##Now do read
#F
empty = data.frame()
for (i in unique(gammas_READ_F$Subject)){
temp = subset(gammas_READ_F, gammas_READ_F$Subject == i)
g = rcorr.cens(temp$Recall, temp$JOL, outx = TRUE)[2]
g = unname(g)
temp2 = data.frame(i, g)
empty = rbind(temp2, empty)
}
forward_READ = empty
#Backward
empty = data.frame()
for (i in unique(gammas_READ_B$Subject)){
temp = subset(gammas_READ_B, gammas_READ_B$Subject == i)
g = rcorr.cens(temp$Recall, temp$JOL, outx = TRUE)[2]
g = unname(g)
temp2 = data.frame(i, g)
empty = rbind(temp2, empty)
}
backward_READ = empty
#Symmetrical
empty = data.frame()
for (i in unique(gammas_READ_S$Subject)){
temp = subset(gammas_READ_S, gammas_READ_B$Subject == i)
g = rcorr.cens(temp$Recall, temp$JOL, outx = TRUE)[2]
g = unname(g)
temp2 = data.frame(i, g)
empty = rbind(temp2, empty)
}
symmetrical_READ = empty
#Unrelated
empty = data.frame()
for (i in unique(gammas_READ_U$Subject)){
temp = subset(gammas_READ_U, gammas_READ_U$Subject == i)
g = rcorr.cens(temp$Recall, temp$JOL, outx = TRUE)[2]
g = unname(g)
temp2 = data.frame(i, g)
empty = rbind(temp2, empty)
}
Unrelated_READ = empty
##Okay, get means!
#IS
mean(forward_IS$g, na.rm = T)
mean(backward_IS$g, na.rm = T)
mean(symmetrical_IS$g, na.rm = T)
mean(Unrelated_IS$g, na.rm = T)
#RL
mean(forward_RL$g, na.rm = T)
mean(backward_RL$g, na.rm = T)
mean(symmetrical_RL$g, na.rm = T)
mean(Unrelated_RL$g, na.rm = T)
#READ
mean(forward_READ$g, na.rm = T)
mean(backward_READ$g, na.rm = T)
mean(symmetrical_READ$g, na.rm = T)
mean(Unrelated_READ$g, na.rm = T)
####Set up for Gamma ANOVA####
##IS
forward_IS$group = rep("IS")
forward_IS$direction = rep("F")
backward_IS$group = rep("IS")
backward_IS$direction = rep("B")
symmetrical_IS$group = rep("IS")
symmetrical_IS$direction = rep("S")
Unrelated_IS$group = rep("IS")
Unrelated_IS$direction = rep("U")
##rl
forward_RL$group = rep("RL")
forward_RL$direction = rep("F")
backward_RL$group = rep("RL")
backward_RL$direction = rep("B")
symmetrical_RL$group = rep("RL")
symmetrical_RL$direction = rep("S")
Unrelated_RL$group = rep("RL")
Unrelated_RL$direction = rep("U")
##read
forward_READ$group = rep("READ")
forward_READ$direction = rep("F")
backward_READ$group = rep("READ")
backward_READ$direction = rep("B")
symmetrical_READ$group = rep("READ")
symmetrical_READ$direction = rep("S")
Unrelated_READ$group = rep("READ")
Unrelated_READ$direction = rep("U")
##Now combine
gamma_ANOVA = rbind(forward_IS, forward_READ, forward_RL,
backward_IS, backward_READ, backward_RL,
symmetrical_IS, symmetrical_READ, symmetrical_RL,
Unrelated_IS, Unrelated_READ, Unrelated_RL)
#get rid of nan's
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
gamma_ANOVA[is.nan(gamma_ANOVA)] <- 0
gamma_ANOVA$i = as.character(gamma_ANOVA$i)
##Okay, anova time!
output_gamma = ezANOVA(gamma_ANOVA,
within = direction,
between = group,
wid = i,
dv = g,
type = 3,
detailed = T)
output_gamma$ANOVA$MSE = output_gamma$ANOVA$SSd/output_gamma$ANOVA$DFd
output_gamma$ANOVA$MSE
aovEffectSize(output_gamma, effectSize = "pes")
tapply(gamma_ANOVA$g, gamma_ANOVA$group, mean)
tapply(gamma_ANOVA$g, gamma_ANOVA$direction, mean)
tapply(gamma_ANOVA$g, list(gamma_ANOVA$group, gamma_ANOVA$direction), mean) #interaction
#Differ from zero?
#read
t.test(forward_READ$g)
t.test(backward_READ$g) #non-sig
t.test(symmetrical_READ$g)
t.test(Unrelated_READ$g)
#IS
t.test(forward_IS$g) #non-sig
t.test(backward_IS$g) #non-sig
t.test(symmetrical_IS$g)
t.test(Unrelated_IS$g)
#RL
t.test(forward_RL$g) #non-sig
t.test(backward_RL$g) #non-sig
t.test(backward_RL$g) #non-sig
t.test(symmetrical_RL$g) #non-sig
t.test(Unrelated_RL$g) #non-sig
