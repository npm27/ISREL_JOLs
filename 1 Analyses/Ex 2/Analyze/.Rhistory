key = "Target",
key.trial = "Study_Num",
id = "Subject",
id.trial = "Recall_Num",
cutoff = 0)
prop_correct_cued(datA,
responses = "Response",
key = "Target",
key.trial = "Study_Num",
id = "Subject",
id.trial = "Study_Num",
cutoff = 0)
View(datA)
prop_correct_cued(datA,
responses = "Response",
key = keyA$Target,
key.trial = keyA$Recall_Num
id = "Subject",
?prop_correct_free
prop_correct_cued(datA,
responses = "Response",
key = keyA$Target,
key.trial = keyA$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 0)
scoredA = prop_correct_cued(datA,
responses = "Response",
key = keyA$Target,
key.trial = keyA$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 0)
View(scoredA$DF_Participant)
View(scoredA$DF_Scored)
#fix case
datA$Response = tolower(datA$Response)
datC$Response = tolower(datC$Response)
datD$Response = tolower(datD$Response)
keyA$Target = tolower(keyA$Target)
keyB$Target = tolower(keyB$Target)
keyC$Target = tolower(keyC$Target)
keyD$Target = tolower(keyD$Target)
#now score!
scoredA = prop_correct_cued(datA,
responses = "Response",
key = keyA$Target,
key.trial = keyA$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 0)
View(scoredA$DF_Scored)
#now score!
scoredA = prop_correct_cued(datA,
responses = "Response",
key = keyA$Target,
key.trial = keyA$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredA$DF_Scored)
#B
scoredB = prop_correct_cued(datB,
responses = "Response",
key = keyB$Target,
key.trial = keyB$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredB$DF_Scored)
#C
scoredC = prop_correct_cued(datC,
responses = "Response",
key = keyC$Target,
key.trial = keyC$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredC$DF_Scored)
#D
scoredD = prop_correct_cued(datD,
responses = "Response",
key = keyD$Target,
key.trial = keyD$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredD$DF_Scored)
table(datC$Subject)
####Build the different subsets for scoring####
dat = read.csv("combined.csv")
table(dat$Group)
#make the data subsets
datA = subset(dat,
dat$Group == "JOL A")
datB = subset(dat,
dat$Group == "JOL B")
datC = subset(dat,
dat$Group == "JOL C")
datD = subset(dat,
dat$Group == "JOL D")
#now make the answer keys
keyA = subset(datA,
datA$Subject == 1)
keyA = keyA[ , c(4, 5, 10)]
keyB = subset(datB,
datB$Subject == 2)
keyB = keyB[ , c(4, 5, 10)]
keyC = subset(datC,
datC$Subject == 3)
keyC = keyC[ , c(4, 5, 10)]
keyD = subset(datD,
datD$Subject == 4)
keyD = keyD[ , c(4, 5, 10)]
##write everything to file
#data
#write.csv(datA, file = "datA.csv", row.names = F)
#write.csv(datB, file = "datB.csv", row.names = F)
#write.csv(datC, file = "datC.csv", row.names = F)
#write.csv(datD, file = "datD.csv", row.names = F)
#answer keys
#write.csv(keyA, file = "keyA.csv", row.names = F)
#write.csv(keyB, file = "keyB.csv", row.names = F)
#write.csv(keyC, file = "keyC.csv", row.names = F)
#write.csv(keyD, file = "keyD.csv", row.names = F)
####score the data####
library(lrd)
#fix case
datA$Response = tolower(datA$Response)
datB$Response = tolower(datB$Response)
datC$Response = tolower(datC$Response)
datD$Response = tolower(datD$Response)
keyA$Target = tolower(keyA$Target)
keyB$Target = tolower(keyB$Target)
keyC$Target = tolower(keyC$Target)
keyD$Target = tolower(keyD$Target)
#now score!
#A
scoredA = prop_correct_cued(datA,
responses = "Response",
key = keyA$Target,
key.trial = keyA$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredA$DF_Scored)
#B
scoredB = prop_correct_cued(datB,
responses = "Response",
key = keyB$Target,
key.trial = keyB$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredB$DF_Scored)
table(datC$Subject)
#C
scoredC = prop_correct_cued(datC,
responses = "Response",
key = keyC$Target,
key.trial = keyC$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredC$DF_Scored)
#D
scoredD = prop_correct_cued(datD,
responses = "Response",
key = keyD$Target,
key.trial = keyD$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredD$DF_Scored)
#C
scoredC = prop_correct_cued(datC,
responses = "Response",
key = keyC$Target,
key.trial = keyC$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
table(datC$Subject)
####Build the different subsets for scoring####
dat = read.csv("combined.csv")
table(dat$Group)
#make the data subsets
datA = subset(dat,
dat$Group == "JOL A")
datB = subset(dat,
dat$Group == "JOL B")
datC = subset(dat,
dat$Group == "JOL C")
datD = subset(dat,
dat$Group == "JOL D")
#now make the answer keys
keyA = subset(datA,
datA$Subject == 1)
keyA = keyA[ , c(4, 5, 10)]
keyB = subset(datB,
datB$Subject == 2)
keyB = keyB[ , c(4, 5, 10)]
keyC = subset(datC,
datC$Subject == 3)
keyC = keyC[ , c(4, 5, 10)]
keyD = subset(datD,
datD$Subject == 4)
keyD = keyD[ , c(4, 5, 10)]
##write everything to file
#data
#write.csv(datA, file = "datA.csv", row.names = F)
#write.csv(datB, file = "datB.csv", row.names = F)
#write.csv(datC, file = "datC.csv", row.names = F)
#write.csv(datD, file = "datD.csv", row.names = F)
#answer keys
#write.csv(keyA, file = "keyA.csv", row.names = F)
#write.csv(keyB, file = "keyB.csv", row.names = F)
#write.csv(keyC, file = "keyC.csv", row.names = F)
#write.csv(keyD, file = "keyD.csv", row.names = F)
####score the data####
library(lrd)
#fix case
datA$Response = tolower(datA$Response)
datB$Response = tolower(datB$Response)
datC$Response = tolower(datC$Response)
datD$Response = tolower(datD$Response)
keyA$Target = tolower(keyA$Target)
keyB$Target = tolower(keyB$Target)
keyC$Target = tolower(keyC$Target)
keyD$Target = tolower(keyD$Target)
#now score!
#A
scoredA = prop_correct_cued(datA,
responses = "Response",
key = keyA$Target,
key.trial = keyA$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredA$DF_Scored)
#B
scoredB = prop_correct_cued(datB,
responses = "Response",
key = keyB$Target,
key.trial = keyB$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredB$DF_Scored)
table(datC$Subject)
#C
scoredC = prop_correct_cued(datC,
responses = "Response",
key = keyC$Target,
key.trial = keyC$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredC$DF_Scored)
#D
scoredD = prop_correct_cued(datD,
responses = "Response",
key = keyD$Target,
key.trial = keyD$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredD$DF_Scored)
table(datC$Subject)
####Build the different subsets for scoring####
dat = read.csv("combined.csv")
table(dat$Group)
#make the data subsets
datA = subset(dat,
dat$Group == "JOL A")
datB = subset(dat,
dat$Group == "JOL B")
datC = subset(dat,
dat$Group == "JOL C")
datD = subset(dat,
dat$Group == "JOL D")
#now make the answer keys
keyA = subset(datA,
datA$Subject == 1)
keyA = keyA[ , c(4, 5, 10)]
keyB = subset(datB,
datB$Subject == 2)
keyB = keyB[ , c(4, 5, 10)]
keyC = subset(datC,
datC$Subject == 3)
keyC = keyC[ , c(4, 5, 10)]
keyD = subset(datD,
datD$Subject == 4)
keyD = keyD[ , c(4, 5, 10)]
##write everything to file
#data
#write.csv(datA, file = "datA.csv", row.names = F)
#write.csv(datB, file = "datB.csv", row.names = F)
#write.csv(datC, file = "datC.csv", row.names = F)
#write.csv(datD, file = "datD.csv", row.names = F)
#answer keys
#write.csv(keyA, file = "keyA.csv", row.names = F)
#write.csv(keyB, file = "keyB.csv", row.names = F)
#write.csv(keyC, file = "keyC.csv", row.names = F)
#write.csv(keyD, file = "keyD.csv", row.names = F)
####score the data####
library(lrd)
#fix case
datA$Response = tolower(datA$Response)
datB$Response = tolower(datB$Response)
datC$Response = tolower(datC$Response)
datD$Response = tolower(datD$Response)
keyA$Target = tolower(keyA$Target)
keyB$Target = tolower(keyB$Target)
keyC$Target = tolower(keyC$Target)
keyD$Target = tolower(keyD$Target)
#now score!
#A
scoredA = prop_correct_cued(datA,
responses = "Response",
key = keyA$Target,
key.trial = keyA$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredA$DF_Scored)
#B
scoredB = prop_correct_cued(datB,
responses = "Response",
key = keyB$Target,
key.trial = keyB$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredB$DF_Scored)
table(datC$Subject)
#C
scoredC = prop_correct_cued(datC,
responses = "Response",
key = keyC$Target,
key.trial = keyC$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredC$DF_Scored)
#D
scoredD = prop_correct_cued(datD,
responses = "Response",
key = keyD$Target,
key.trial = keyD$Recall_Num,
id = "Subject",
id.trial = "Study_Num",
cutoff = 1)
View(scoredD$DF_Scored)
#now combine!
scored = rbind(scoredA$DF_Scored, scoredB$DF_Scored,
scoredC$DF_Scored, scoredD$DF_Scored)
View(scored)
#and drop extra columns
scored = scored[, -c(1, 9:12)]
#now combine!
scored = rbind(scoredA$DF_Scored, scoredB$DF_Scored,
scoredC$DF_Scored, scoredD$DF_Scored)
#and drop extra columns
scored = scored[, -c(1, 5:6, 9:12)]
#and order by subject
scored = scored[order(scored$Sub.ID), ]
#and finall... write to file!
write.csv(scored, file = "Ex 2 Scored.csv")
#and finall... write to file!
write.csv(scored, file = "Ex 2 Scored.csv", row.names = F)
setwd("~/GitHub/ISREL_JOLs/1 Analyses/Ex 2/Analyze")
####Set up####
##read in data
dat = read.csv("Ex 2 Scored.csv")
##libraries
library(reshape)
library(ez)
##turn of scientific notation
options(scipen = 999)
####Descriptives and cleaning####
#fix jols
dat$JOL = as.numeric(dat$JOL)
dat$JOL[dat$JOL > 100] = NA
#fix recall
dat$Scored = dat$Scored * 100 #get jols and recall on same scale
#Okay, what are we working with now?
summary(dat)
#remove the NAs
dat = na.omit(dat)
8116+44
View(dat)
##check for outliers/general weirdness
#any participants who got nothing correct? (shouldn't have to worry about cheating since in person!)
check_dat = cast(dat, Sub.ID ~ Direction, mean)
View(check_dat)
colnames(dat)[6] = "Recall"
##get data in long format
long.dat = melt(dat, measure.vars = c("JOL", "Recall"))
View(long.dat)
colnames(long.dat)[5] = "measure"
colnames(long.dat)[6] = "Score"
##descriptives
tapply(long.dat$Score, list(long.dat$Group, long.dat$Direction))
##descriptives
tapply(long.dat$Score, list(long.dat$Group, long.dat$Direction), mean)
##descriptives
tapply(long.dat$Score, list(long.dat$measure, long.dat$Direction), mean)
View(long.dat)
#make the subsets
READ = subset(long.dat,
long.dat$Encoding == "READ")
View(READ)
IS = subset(long.dat,
long.dat$Encoding == "IS")
RL = subset(long.dat,
long.dat$Encoding == "RL")
##READ
tapply(READ$Score, list(READ$measure, READ$Direction), mean)
##IS
tapply(IS$Score, list(IS$measure, IS$Direction), mean)
##RL
tapply(RL$Score, list(RL$measure, RL$Direction), mean)
####ANOVA time####
model1 = ezANOVA(long.dat,
dv = Score,
between = Encoding,
within = .(measure, Direction),
wid = Sub.ID,
type = 3,
detailed = T)
summary(model1)
model1
#main effect of "measure" (diff between JOLs and recall is NS)
tapply(long.dat$Score, long.dat$measure)
#main effect of "measure" (diff between JOLs and recall is NS)
tapply(long.dat$Score, long.dat$measure, mean)
##READ
tapply(READ$Score, list(READ$measure, READ$Direction), mean)
####Set up####
##read in data
dat = read.csv("Ex 2 Scored.csv")
##libraries
library(reshape)
library(ez)
##turn of scientific notation
options(scipen = 999)
####Cleaning####
#fix jols
dat$JOL = as.numeric(dat$JOL) #get rid of any weird characters
dat$JOL[dat$JOL > 100] = NA #remove out of range values
#fix recall
dat$Scored = dat$Scored * 100 #get jols and recall on same scale
#Okay, what are we working with now?
summary(dat)
#remove the NAs
dat = na.omit(dat)
##check for outliers/general weirdness
#any participants who got nothing correct? (shouldn't have to worry about cheating since in person!)
check_dat = cast(dat, Sub.ID ~ Direction, mean)
colnames(dat)[6] = "Recall"
##get data in long format
long.dat = melt(dat, measure.vars = c("JOL", "Recall"))
colnames(long.dat)[5] = "measure"
colnames(long.dat)[6] = "Score"
##descriptives
tapply(long.dat$Score, list(long.dat$measure, long.dat$Direction), mean) ##overall
#make the subsets
READ = subset(long.dat,
long.dat$Encoding == "READ")
IS = subset(long.dat,
long.dat$Encoding == "IS")
RL = subset(long.dat,
long.dat$Encoding == "RL")
##READ
tapply(READ$Score, list(READ$measure, READ$Direction), mean)
##IS
tapply(IS$Score, list(IS$measure, IS$Direction), mean)
##READ
tapply(READ$Score, list(READ$measure, READ$Direction), mean)
##RL
tapply(RL$Score, list(RL$measure, RL$Direction), mean)
model1
model1 = ezANOVA(long.dat,
dv = Score,
between = Encoding,
within = .(measure, Direction),
wid = Sub.ID,
type = 3,
detailed = T)
model1
##significant effects
#main effect of direction
tapply(long.dat$Score, long.dat$Direction, mean)
tapply(long.dat$Score, long.dat$Encoding, mean)
model1
##2-way interactions
tapply(long.dat$Score, list(long.dat$measure, long.dat$Encoding))
##2-way interactions
tapply(long.dat$Score, list(long.dat$measure, long.dat$Encoding), mean)
tapply(long.dat$Score, list(long.dat$measure, long.dat$Direction), mean)
tapply(long.dat$Score, list(long.dat$Encoding, long.dat$Direction), mean)
####post-hocs####
post.IS = cast(IS, Sub.ID ~ Direction, mean)
View(post.IS)
post.READ = cast(READ, Sub.ID ~ Direction, mean)
post.RL = cast(RL, Sub.ID ~ Direction, mean)
#get n
length(unique(dat$Sub.ID))
library(psychReport)
##3-way interaction
tapply(READ$Score, list(READ$measure, READ$Direction), mean) #read
